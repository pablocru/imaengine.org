---
import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import PostMetadata from "./PostMetadata.astro";
import type { BlogPostEntry } from "@content/config";

export type CardType = "vertical" | "horizontal";

interface Props {
  post: BlogPostEntry;
  cardType: CardType;
}

const {
  post: {
    body,
    data: { author, cover, cardDescription, cardTitle, pubDate },
    slug,
  },
  cardType,
} = Astro.props;

const {
  data: { alt: coverAlt, metadata: coverMetadata },
} = await getEntry(cover);

const {
  data: { name, label, profilePicture },
} = await getEntry(author);

const {
  data: { alt: profilePictureAlt, metadata: profilePictureMetadata },
} = await getEntry(profilePicture);
---

<a href={"/" + slug}>
  <article class:list={["post", cardType]}>
    <header class="post-cover">
      <Image alt={coverAlt} src={coverMetadata} width={675} />
    </header>

    <main class="post-overview">
      <h3>{cardTitle}</h3>
      <p>{cardDescription}</p>
    </main>

    <aside class="post-author">
      <header class="post-author-picture">
        <Image alt={profilePictureAlt} src={profilePictureMetadata} width={45} />
      </header>

      <main>
        <p>
          <strong>{name}</strong>
        </p>
        <p>{label}</p>
      </main>
    </aside>

    <PostMetadata pubDate={pubDate} postBody={body} />
  </article>
</a>

<style>
  /* :any-link -> to prevent different font colors depending on the link state */
  a:any-link {
    /* Remove styles related with the anchor tag */
    color: inherit;
    text-decoration: none;

    /* @container will modify styles depending on this element's size */
    display: block;
    container-type: inline-size;
  }

  .post-cover img {
    /* Cover the available space */
    max-width: 100%;
    height: auto;
    object-fit: cover;
  }

  /* Reduce importance in the layout */
  .post-author,
  .post-metadata {
    font-size: smaller;
  }

  .post-author-picture img {
    /* Add a circle shape */
    border-radius: 100%;
  }

  @supports (display: flex) and (display: grid) {
    a,
    .post {
      /* The card must fit the available space in order to stretch Post Overview */
      height: 100%;
    }

    .post * {
      /* Remove margins because spaces are managed by the Gap property */
      margin: 0;
    }

    .post-cover {
      /* Center cover in smaller devices */
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .post-author {
      /* Place the profile picture and the author data in a row */
      display: flex;
      gap: 0.5em;
    }

    .post-metadata {
      /* Place metadata in a row */
      display: flex;
      flex-wrap: wrap;
      column-gap: 2em;
      row-gap: 1em;
    }

    /* --- VERTICAL ------------------------------------------------------------------- */
    .post {
      /* By default it creates a single column grid */
      display: grid;
      grid-template-rows: auto auto 1fr auto;
      grid-template-areas:
        "author"
        "cover"
        "overview"
        "metadata";
      gap: 1em;
    }
    .post-author {
      grid-area: author;
    }
    .post-cover {
      grid-area: cover;
    }
    .post-overview {
      grid-area: overview;
    }
    .post-metadata {
      grid-area: metadata;
    }
    /* -------------------------------------------------------------------------------- */

    /* --- HORIZONTAL ----------------------------------------------------------------- */
    /*
      In bigger screens the grid will have 2 columns with the cover smaller than the
      regular content.

      Note: "min-width" must be 1px bigger than the
      "width" property of the <Image> component
    */
    @container (min-width: 676px) {
      .post.horizontal {
        grid-template-columns: 2fr 1fr;
        grid-template-rows: unset;
        grid-template-areas:
          "author cover"
          "overview cover"
          "metadata metadata";
      }
    }
    /* -------------------------------------------------------------------------------- */
  }
</style>
